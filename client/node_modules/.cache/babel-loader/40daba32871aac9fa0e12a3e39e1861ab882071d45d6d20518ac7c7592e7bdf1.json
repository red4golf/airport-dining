{"ast":null,"code":"const logSearch = async (searchTerm, wasFound) => {\n  try {\n    await fetch('/api/analytics/search', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        timestamp: new Date().toISOString(),\n        searchTerm,\n        wasFound,\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n      })\n    });\n  } catch (err) {\n    console.error('Analytics error:', err);\n    // Non-blocking - failures shouldn't affect user experience\n  }\n};\nexport { logSearch };","map":{"version":3,"names":["logSearch","searchTerm","wasFound","fetch","method","headers","body","JSON","stringify","timestamp","Date","toISOString","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","err","console","error"],"sources":["C:/Users/CEinarson/Documents/MyStuff/cluade/test/airport-restaurants/airport-dining/client/src/utils/analytics.js"],"sourcesContent":["const logSearch = async (searchTerm, wasFound) => {\r\n  try {\r\n    await fetch('/api/analytics/search', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        timestamp: new Date().toISOString(),\r\n        searchTerm,\r\n        wasFound,\r\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\r\n      })\r\n    });\r\n  } catch (err) {\r\n    console.error('Analytics error:', err);\r\n    // Non-blocking - failures shouldn't affect user experience\r\n  }\r\n};\r\n\r\nexport { logSearch };\r\n"],"mappings":"AAAA,MAAMA,SAAS,GAAG,MAAAA,CAAOC,UAAU,EAAEC,QAAQ,KAAK;EAChD,IAAI;IACF,MAAMC,KAAK,CAAC,uBAAuB,EAAE;MACnCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCV,UAAU;QACVC,QAAQ;QACRU,QAAQ,EAAEC,IAAI,CAACC,cAAc,CAAC,CAAC,CAACC,eAAe,CAAC,CAAC,CAACC;MACpD,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEF,GAAG,CAAC;IACtC;EACF;AACF,CAAC;AAED,SAASjB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}